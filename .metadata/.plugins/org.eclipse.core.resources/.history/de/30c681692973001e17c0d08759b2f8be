package com.myWeb.www.controller;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;


import com.myWeb.www.domain.boardVO;
import com.myWeb.www.domain.fileVO;
import com.myWeb.www.domain.pagingVO;
import com.myWeb.www.handler.FileHandler;
import com.myWeb.www.handler.PagingHandler;
import com.myWeb.www.service.BoardService;

import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/board/*")
@Slf4j
public class BoardController 
{
	//폴더명 : board / mapping : board
	//mapping => /board/register
	//목적지 => /board/register
	//목적지랑 mapping이랑 같으면 return값 생략가능 public void getRegister(){}
	@Inject
	private BoardService bsv;
	
	@Inject
	private FileHandler fh;
	
	private int isOk;
	
	@GetMapping("/register")
	public void getRegister()
	{
		log.info("start!");
	}
	
	@PostMapping("/register")
	public String postRegister(boardVO bvo,@RequestParam(name="files",required = false)MultipartFile[] files)
	{
		log.info("bvo:"+bvo+" file:"+files);
		List<fileVO>flist=new ArrayList<fileVO>();
		//file upload handler 생성
		if(files[0].getSize()>0)
		{
			flist=fh.uploadFiles(files);
		}
		
			
//			isOk=bsv.register(bvo);
		isOk=bsv.insert(new BoardDTO(bvo,flist));
		
		
		
		return "index";
	}
	
	/*
	 * @GetMapping("/list") public String getList(Model model) {
	 * log.info("getList check"); List<boardVO> list = bsv.getList();
	 * model.addAttribute("list", list); return "/board/list";
	 * 
	 * }
	 */
	//페이징 추가
	@GetMapping("/list")
	public void getList(Model model,pagingVO pgvo)
	{
		log.info("pagingVO>>"+pgvo);
		model.addAttribute("list",bsv.getPageList(pgvo));
		//페이징 처리
		//총 페이지 갯수 totalCount 검색포함
		int totalCount =bsv.getTotalCount(pgvo);
		PagingHandler ph=new PagingHandler(pgvo, totalCount);
		model.addAttribute("ph", ph);
		log.info("ph:"+ph);
	}
	
	@GetMapping("/detail")
	public String getDetail(Model model,@RequestParam("bno")int bno)
	{
		log.info("getDetail check");
		bsv.readCountUp(bno);
		BoardDTO bdto= new BoardDTO(bsv.getDetail(bno), bsv.getFlist(bno));
		model.addAttribute("bdto", bdto);
		return "/board/detail";
	}
	
	@GetMapping("/modify")
	public String getModify(Model model,@RequestParam("bno")int bno)
	{
		log.info("getModify check");
		boardVO bvo=bsv.getDetail(bno);
		List<fileVO> flist=bsv.getFlist(bno);
		log.info("bvo:"+bvo);
		model.addAttribute("flist", flist);
		model.addAttribute("bvo", bvo);
		return "/board/modify";
	}
	@DeleteMapping(value = "/{uuid}")
	public ResponseEntity<String> fileRemove(@PathVariable("uuid")String uuid)
	{
		log.info("fileRemove check");
		isOk=bsv.fileRemove(uuid);
		return isOk>0 ? new ResponseEntity<String>("1",HttpStatus.OK):new ResponseEntity<String>("0",HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@PostMapping("/modify")
	public String postModify(BoardDTO bdto,@RequestParam(name="files",required = false)MultipartFile[] files)
	{
		log.info("postModify check");
		isOk=bsv.postModify(bdto.getBvo());
		List<fileVO>flist=new ArrayList<fileVO>();
		
		if(files[0].getSize()>0)
		{
			flist=fh.uploadFiles(files);
		}
		bsv.modifyFiles(flist,bdto.getBvo().getBno());

		return "redirect:/board/list";
	}
	@GetMapping("/remove")
	public String getRemove(@RequestParam("bno")int bno)
	{
		log.info("remove check");
		isOk=bsv.getRemove(bno);
		//board/list로 그냥 이동하면은 데이터가 없어서 아무것도 안뜨니까 redirect로 list를 거쳐서 이동한다.
		//가져되야할 값이있으면 매개변수에서 RedirectAttributes reAttr 을선언해주고 return에서 값을 달고 간다
		return "redirect:/board/list";
	}
	
	
	
	

}
